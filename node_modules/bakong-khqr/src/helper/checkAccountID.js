const { KHQRResponse } = require("../model");
const { errorCode, emv } = require("../constant");
const fetch = require("node-fetch");

async function isAccountIDExist(url, accountID) {
    // Check account ID length
    if (accountID.length > emv.INVALID_LENGTH.BAKONG_ACCOUNT)
        throw KHQRResponse(null, errorCode.BAKONG_ACCOUNT_ID_INVALID);

    // fetch from URL
    let fetchData;
    try {
        fetchData = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ accountId: accountID }),
            timeout: 45 * 1000,
        });
        const clonedResponse = fetchData.clone()
        JSON.parse(await clonedResponse.text());
    } catch (error) {
        throw KHQRResponse(null, errorCode.CONNECTION_TIMEOUT);
    }

    if (fetchData == undefined)
        throw KHQRResponse(null, errorCode.CONNECTION_TIMEOUT);

    // Check the response status
    if (fetchData.status == 404 || fetchData.status == 500)
        throw KHQRResponse(null, errorCode.CONNECTION_TIMEOUT);

    const response = await fetchData.json();

    // Check the response status
    if (response.status == 404 || response.status == 500)
        throw KHQRResponse(null, errorCode.CONNECTION_TIMEOUT);

    // Getting Response
    const responseCode = response.responseCode;
    const error = response.errorCode;

    if (error == 11) return { bakongAccountExisted: false };
    if (error == 12)
        throw KHQRResponse(null, errorCode.BAKONG_ACCOUNT_ID_INVALID);

    // Return value
    if (responseCode == 0) return { bakongAccountExisted: true };
    else return { bakongAccountExisted: false };
}

module.exports = isAccountIDExist;
